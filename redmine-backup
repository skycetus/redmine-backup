#! /bin/sh

### This file is covered by the GNU General Public License,
### which should be included with libshell as the file LICENSE.
### All copyright information are listed in the COPYING.

#
# HOWTO keywords:
#   - redmine backup
#   - svn backup
#   - git backup
#   - bzr backup
#   - hg backup
#
# This script does backup copy of sensitive content provided by Turnkey Redmine Appliance
#   - http://www.turnkeylinux.org/redmine
#
# There are:
#   - redmine self with upgrade instruction in help
#     = mysql db redmine-production
#     = /var/www/redmine/files/
#     = /var/www/redmine/config/
#     = /var/www/redmine/plugins/
#   - repositories
#     = bzr
#     = svn
#     = git
#     = hg
#   - host configuration
#     = apache2
#     = etckeeper
#
# Backup copy stored as tree:
#   $storage/
#       apache2/    - backup copy of /etc/apache2
#       bzr/        - backup copy of bzr repos
#       etc/        - backup copy of /etc (via etckeeper)
#       git/        - backup copy of git repos
#       hg/         - backup copy of hg repos
#       redmine/    - sensitive data of the web appclication
#       svn/        - backup copy, dumps, and restored from dumps copyes of svn repos
#
# Main config option are:
#   remote          - redmine admin (probably root) in form of ssh user@hostname
#   storage         - local directory where to store backup
#   packed          - compressed format of text dumps, .gz, .xz, .bz2 or nothing
#   verbose         - =yes to display stages of running script
#   progress        - =yes to display percentage of copying/packing/unpacking
#   quiet           - =yes to supress output of version control utilities
#   message_syslog  - =yes to send messages of running scrip into syslog
#
# Partial config opions are:
#   disable_apache2 - =yes to disable backup apache2
#   disable_bzr     - =yes to disable backup bzr
#   disable_etc     - =yes to disable backup etc
#   disable_git     - =yes to disable backup git
#   disable_hg      - =yes to disable backup hg
#   disable_redmine - =yes to disable backup redmine
#   disable_svn     - =yes to disable backup svn
#
# To run this script you need
#   - have ssh
#   - know how to be root@redmine
#   - know how to use ssh-keygen and ssh-copy-id
#   - create ~/.my.cnf for remote

. shell-error
. shell-var

# approve means: test vs defined and not negative
approve()
{
	test $1 && ! shell_var_is_no "$1"
}

# denounce means test vs undefined or negative
denounce()
{
	test ! $1 || shell_var_is_no "$1"
}

# configuration
configure()
{
	local configure

	# From where take resources
	remote=root@redmine
	# where to storage backing stories
	storage=/var/tmp/storage
	# how to compress dumps: , .gz, .bz2, .xz
	packed=.xz
	# verbosity
	verbose=
	# external progress indication
	progress=
	# external quiet
	quiet=yes

	for configure in /etc/$PROG ~/etc/$PROG ~/.config/$PROG ~/.$PROG; do
		test -e $configure && . $configure
	done

	approve "$quiet" && quiet=yes || quiet=
	approve "$verbose" && verbose=yes || verbose=
	approve "$progress" && progress=yes || progress=
	approve "$message_syslog" && message_syslog=yes || message_syslog=

	test $storage && test ${storage:0:1} = / || fatal wrong storage
	test $remote && ssh $remote true || fatal wrong remote

	case $packed in
		.bz2)	zput=bzip2;	zcat=bzcat;	zopt=${progress:+"-p"};;
		.gz)	zput=gzip;	zcat=zcat;	zopt=;;
		.xz)	zput=xz;	zcat=xzcat;	zopt=${progress:+"-v"};;
		*)	zput=true;	zcat=cat;	zopt=
			test $packed && fatal unknown packed format $packed
			;;
	esac

	verbose remote: $remote
	verbose storage: $storage
	verbose packed: $packed
}

create_storage()
{
	mkdir -p $1 || fatal can not create $1
}

# files that can be not saved under /etckeeper
backup_apache2()
{
	local here=$storage
	local there=/etc/apache2
	create_storage $here
	verbose start backup of remote apache2 config
	rsync -aHS --delete-after ${progress:+"-vP"} $remote:/$there $here
}

backup_bzr()
{
	local here=$storage/bzr
	local there=/srv/repos/bzr
	create_storage $here
	for repo in $( ssh $remote ls $there ); do
		verbose start backup of remote bzr repository $repo
		test -d $here/$repo ||
			bzr init-repo --no-trees ${quiet:+-q} $here/$repo ||
				fatal bzr init-repo failed
		local here_branches=$( bzr branches -R $here/$repo )
		for branch in $( ssh $remote bzr branches -R $there/$repo ); do
			verbose + branch $repo/$branch
			for exist in $here_branches; do
				if [ "$exist" = "$branch" ]; then
					bzr pull -d $here/$repo/$branch --remember ${quiet:+-q} bzr+ssh://$remote/$there/$repo/$branch ||
						fatal bzr pull of $here/$repo/$branch failed
					branch=..
					break
				fi
			done
			test "$branch" = ".." && continue
			mkdir -p $here/$repo/$branch &&
				bzr init --no-tree ${quiet:+-q} $here/$repo/$branch &&
					bzr pull -d $here/$repo/$branch --remember ${quiet:+-q} bzr+ssh://$remote/$there/$repo/$branch ||
						fatal bzr pull of $here/$repo/$branch failed
		done
	done
}

# remote etckeeper repository
backup_etc()
{
	local repo=etc
	local here=$storage
	local there=
	create_storage $here
	verbose start backup of remote etckeeper
	test -d $here/$repo ||
		git clone --mirror $remote:$there/$repo $here/$repo ||
			fatal git clone failed on etckeeper
	git --git-dir $here/$repo remote update ||
		fatal git update failed on etckeeper
}

backup_git()
{
	local here=$storage/git
	local there=/srv/repos/git
	create_storage $here
	for repo in $( ssh $remote ls $there ); do
		# special case: symlink to public cache
		test "$repo" = public && continue
		verbose start backup of remote git repository $repo
		test -d $here/$repo ||
			git clone --mirror $remote:$there/$repo $here/$repo ||
				fatal git clone failed on $repo
		git --git-dir $here/$repo remote update ||
			fatal git update failed on $repo
	done
}

backup_hg()
{
	local here=$storage/hg
	local there=/srv/repos/hg
	create_storage $here
	for repo in $( ssh $remote ls $there ); do
		verbose start backup of remote hg repository $repo
		test -d $here/$repo ||
			hg ${quiet:+-q} clone --noupdate ssh://$remote/$there/$repo $here/$repo ||
				fatal hg clone failed on $repo
		hg -R $here/$repo ${quiet:+-q} pull ssh://$remote/$there/$repo ||
			fatal hg pull failed on $repo
	done
}

create_svn_repo()
{
	svnadmin create $1 &&
		chgrp -R subversion $1 &&
			chmod -R g+rwX $1 &&
				find $1 -type d -exec chmod g+s {} \; ||
					fatal creation of $1 failed
}

# Backing of remote svn repository
backup_svn()
{
	local here=$storage/svn
	local there=/srv/repos/svn
	create_storage $here
	for repo in $( ssh $remote ls $there ); do
		verbose start backup of remote svn repository $repo
		ssh $remote svnadmin verify ${quiet:+-q} $there/$repo ||
			fatal remote svn repository $repo is damaged
		# target #1: fast backup by svnsync
		if ! test -d $here/$repo ||
			! svnsync sync file://$here/$repo > $here/$repo.sync
		then
			verbose + svnsync init
			rm -rf $here/$repo
			create_svn_repo $here/$repo
			printf '#! /bin/sh\nexit\n' > $here/$repo/hooks/pre-revprop-change &&
				chmod a+rx $here/$repo/hooks/pre-revprop-change
			svnsync init file://$here/$repo svn+ssh://$remote/$there/$repo &&
				svnsync sync file://$here/$repo svn+ssh://$remote/$there/$repo > $here/$repo.sync ||
					fatal svnsync failed
		fi
		test -s $here/$repo.sync || continue
		# If this does not work, then, with LC_MESSAGES=C
		#grep '^Transmitting file data' $here/$repo.sync ||
		#	grep '^Committed revision' $here/$repo.sync ||
		#		grep '^Copied properties for revision' $here/$repo.sync ||
		#			continue
		# target #2: slow slow dump...
		verbose + dump remote svn repository to $here/$repo.dump$packed
		ssh $remote rm   -rf /var/tmp/svn/$repo > /dev/null
		ssh $remote mkdir -p /var/tmp/svn/$repo
		ssh $remote svnadmin hotcopy $there/$repo /var/tmp/svn/$repo ||
			fatal hotcopying of remote svn repository $repo failed
		test ! -f $here/$repo.dump$packed ||
			mv -f $here/$repo.dump$packed $here/$repo.dump$packed.old ||
				fatal rotation of $here/$repo.dump$packed failed
		ssh $remote svnadmin dump ${quiet:+-q} /var/tmp/svn/$repo > $here/$repo.dump &&
			$zput $zopt $here/$repo.dump ||
				fatal dumping of svn repository $repo failed
		ssh $remote rm   -rf /var/tmp/svn/$repo
		# target #3: check dump restoring
		verbose + restore svn repo $repo
		rm -rf $here/$repo.tmp
		create_svn_repo $here/$repo.tmp
		$zcat $zopt $here/$repo.dump$packed | svnadmin load ${quiet:+-q} $here/$repo.tmp ||
			fatal backup of svn repository $repo lost
		verbose + rotate backup copies of svn repo $repo
		if test -d $here/$repo.std && svnadmin verify ${quiet:+-q} $here/$repo.std > /dev/null; then
			test -d $here/$repo.old && rm -rf $here/$repo.old
			mv $here/$repo.std $here/$repo.old
		fi
		mv $here/$repo.tmp $here/$repo.std
		svnadmin verify ${quiet:+-q} $here/$repo.std ||
			fatal unknown error on $here/$repo.std
		verbose + svnsync repo $repo
	done
}

# redmine database + files + ???
# http://www.redmine.org/projects/redmine/wiki/RedmineUpgrade, Step 2 - Backup
backup_redmine()
{
	local here=$storage/redmine
	local there=/var/www/redmine
	create_storage $here
	verbose start backup of remote redmine application
	# Backing up the files
	for folder in files config plugins; do
		verbose + backup $folder/
		rsync -a --delete-after ${progress:+"-vP"} $remote:/$there/$folder $here/
	done
	# MySQL database
	verbose + backup mysql database
	test ! -f $here/redmine.sql$packed ||
		mv -f $here/redmine.sql$packed $here/redmine.sql$packed.old ||
			fatal rotation of $here/redmine.sql$packed failed

	# You can type your password into mysqldump command line, like -pyour_my_password...
	# Well, this is insecure. Your password in ps output, in history, everywhere.
	# You can type -p in command line, then type your_my_password in console when prompted...
	# Well, this is uncomfortable, annoying, unaccectable at end.
	# So, place into file in home directory of mysql administrator (root, yes?), /root/.my.cnf,
	# these 2 lines:

	#[client]
	#password=your_my_password

	# Well... your user, hidden under $remote, must have access to this file, or must be root.
	ssh $remote grep ^password= /root/.my.cnf > /dev/null ||
		fatal MySQL password must be configured and accessible in /root/.my.cnf
	ssh $remote mysqldump -u root --opt redmine_production > $here/redmine.sql &&
		$zput $zopt $here/redmine.sql ||
			fatal dumping of redmine database failed
}

backup()
{
	eval $( printf "local disabled=\${disable_$1}" )
	local made=disabled
	if denounce "$disabled"; then
		eval backup_$1 ||
			fatal backup failed on $1
		made=success
	fi
	message backup $made for $1
}

configure
backup bzr
backup svn
backup git
backup hg
backup etc
backup apache2
backup redmine
