#! /bin/sh
#
# This script does backup copy of all contents, provided by new redmine server
# There are:
#   - repositories,
#     = bzr
#     = svn
#     = git
#     = hg
#   - redmine self by upgrade instruction
#   - configuration
#     = apache2
#     = etckeeper
#
# Result is in:
# $storage/
#	redmine/* - dumps of web appclication
#	bzr/* - copy of bzr repos
#	git/* - copy of git repos
#	hg/* - copy of hg repos
#	svn/* - dumps of svn repos
#
# To run this script you need
#   - have ssh
#   - know how to be root@redmine
#   - know how to use ssh-keygen also ssh-copy-id
#

. shell-error

# Configuration
configure()
{
	local configure

	# From where take resources
	remote=root@redmine
	# where to storage backing stories
	storage=/var/tmp/storage
	# how to compress dumps: , .gz, .bz2, .xz
	packed=.xz
	# verbosity
	verbose=

	for configure in /etc/$PROG ~/etc/$PROG ~/.config/$PROG ~/.$PROG; do
		test -e $configure && . $configure
	done

	test $storage && test ${storage:0:1} = / || fatal wrong storage
	test $remote && ssh $remote true || fatal wrong remote

	case $packed in
		.bz2)	zput=bzip2;	zcat=bzcat;	zopt=${verbose:+"-p"};;
		.gz)	zput=gzip;	zcat=zcat;	zopt=;;
		.xz)	zput=xz;	zcat=xzcat;	zopt=${verbose:+"-v"};;
		*)	zput=true;	zcat=cat;	zopt=
			test $packed && fatal unknown packed format $packed
			;;
	esac

	verbose remote: $remote
	verbose storage: $storage
	verbose packed: $packed
}

create_storage()
{
	mkdir -p $1 || fatal can not create $1
}

backup_bzr()
{
	local here=$storage/bzr
	local there=/srv/repos/bzr
	create_storage $here
	for repo in $( ssh $remote ls $there ); do
		verbose start backup of remote bzr repository $repo
		test -d $here/$repo ||
			bzr init-repo --no-trees -q $here/$repo ||
				fatal bzr init-repo failed
		here_branches=$( bzr branches -R $here/$repo )
		for branch in $( ssh $remote bzr branches -R $there/$repo ); do
			verbose + branch $repo/$branch
#			for exist in $( bzr branches -R $here/$repo ); do
			for exist in $here_branches; do
				if [ "$exist" = "$branch" ]; then
					bzr pull -d $here/$repo/$branch --remember -q bzr+ssh://$remote/$there/$repo/$branch ||
						fatal bzr pull of $here/$repo/$branch failed
					branch=..
					break
				fi
			done
			test "$branch" = ".." && continue
			mkdir -p $here/$repo/$branch &&
				bzr init --no-tree -q $here/$repo/$branch &&
					bzr pull -d $here/$repo/$branch --remember -q bzr+ssh://$remote/$there/$repo/$branch ||
						fatal bzr pull of $here/$repo/$branch failed
		done
	done
	message bzr backup done
}

backup_git()
{
	local here=$storage/git
	local there=/srv/repos/git
	create_storage $here
	for repo in $( ssh $remote ls $there ); do
		# special case: symlink to public cache
		test "$repo" = public && continue
		verbose start backup of remote git repository $repo
		test -d $here/$repo ||
			git clone --mirror $remote:$there/$repo $here/$repo ||
				fatal git clone failed on $repo
		git --git-dir $here/$repo remote update ||
			fatal git update failed on $repo
	done
	message git backup done
}

# remote etckeeper repository
backup_etc()
{
	local repo=etc
	local here=$storage
	local there=
	create_storage $here
	verbose start backup of remote etckeeper
	test -d $here/$repo ||
		git clone --mirror $remote:$there/$repo $here/$repo ||
			fatal git clone failed on etckeeper
	git --git-dir $here/$repo remote update ||
		fatal git update failed on etckeeper
}

backup_hg()
{
	local here=$storage/hg
	local there=/srv/repos/hg
	create_storage $here
	for repo in $( ssh $remote ls $there ); do
		verbose start backup of remote hg repository $repo
		test -d $here/$repo ||
			hg -q clone --noupdate ssh://$remote/$there/$repo $here/$repo ||
				fatal hg clone failed on $repo
		hg -R $here/$repo -q pull ssh://$remote/$there/$repo ||
			fatal hg pull failed on $repo
	done
	message hg backup done
}

create_svn_repo()
{
	svnadmin create $1 &&
		chgrp -R subversion $1 &&
			chmod -R g+rwX $1 &&
				find $1 -type d -exec chmod g+s {} \; ||
					fatal creation of $1 failed
}

# Backing of remote svn repository
backup_svn()
{
	local here=$storage/svn
	local there=/srv/repos/svn
	create_storage $here
	for repo in $( ssh $remote ls $there ); do
		verbose start backup of remote svn repository $repo
		ssh $remote svnadmin verify -q $there/$repo ||
			fatal remote svn repository $repo is damaged
		# target #1: slow slow dump...
		verbose + dump remote svn repository to $here/$repo.dump$packed
		ssh $remote rm   -rf /var/tmp/svn/$repo > /dev/null
		ssh $remote mkdir -p /var/tmp/svn/$repo
		ssh $remote svnadmin hotcopy $there/$repo /var/tmp/svn/$repo ||
			fatal hotcopying of remote svn repository $repo failed
		test ! -f $here/$repo.dump$packed ||
			mv -f $here/$repo.dump$packed $here/$repo.dump$packed.old ||
				fatal rotation of $here/$repo.dump$packed failed
		ssh $remote svnadmin dump -q /var/tmp/svn/$repo > $here/$repo.dump &&
			$zput $zopt $here/$repo.dump ||
				fatal dumping of svn repository $repo failed
		ssh $remote rm   -rf /var/tmp/svn/$repo
		# check dump restoring - target #1, part 2
		verbose + restore svn repo $repo
		rm -rf $here/$repo.tmp
		create_svn_repo $here/$repo.tmp
		$zcat $zopt $here/$repo.dump$packed | svnadmin load -q $here/$repo.tmp ||
			fatal backup of svn repository $repo lost
		verbose + rotate backup copies of svn repo $repo
		if test -d $here/$repo.std && svnadmin verify -q $here/$repo.std > /dev/null; then
			test -d $here/$repo.old && rm -rf $here/$repo.old
			mv $here/$repo.std $here/$repo.old
		fi
		mv $here/$repo.tmp $here/$repo.std
		svnadmin verify -q $here/$repo.std ||
			fatal unknown error on $here/$repo.std
		verbose + svnsync repo $repo
		# target #2: fast backup by svnsync, need a back ssh from remote to backup server, as an operator
		if ! test -d $here/$repo ||
			! svnsync sync -q file://$operator/$here/$repo
		then
			rm -rf $here/$repo
			create_svn_repo $here/$repo
			printf '#! /bin/sh\nexit\n' > $here/$repo/hooks/pre-revprop-change &&
				chmod a+rx $here/$repo/hooks/pre-revprop-change
			svnsync init file://$here/$repo svn+ssh://$remote/$there/$repo &&
				svnsync sync -q file://$here/$repo svn+ssh://$remote/$there/$repo ||
					fatal svnsync failed
		fi
	done
	message svn backup done
}

# redmine database + files + ???
# http://www.redmine.org/projects/redmine/wiki/RedmineUpgrade, Step 2 - Backup
backup_redmine()
{
	local here=$storage/redmine
	local there=/var/www/redmine
	create_storage $here
	# Backing up the files
	for folder in files config plugins; do
		#create_storage $here/$folder
		rsync -a --delete-after ${verbose:+"-vP"} $remote:/$there/$folder $here/
	done
	# MySQL database
	test ! -f $here/redmine.sql$packed ||
		mv -f $here/redmine.sql$packed $here/redmine.sql$packed.old ||
			fatal rotation of $here/redmine.sql$packed failed
	# For this to work create /root/.my.cnf:
	#[client]
	#password=put-here-if-you-know-a-right-password?
	# Another, insecure, metod is to place -pyourpassword into mysqldump command line
	ssh $remote grep ^password= /root/.my.cnf > /dev/null ||
		fatal MySQL password must be configured and accessible in /root/.my.cnf
	ssh $remote mysqldump -u root --opt redmine_production > $here/redmine.sql &&
		$zput $zopt $here/redmine.sql ||
			fatal dumping of redmine database failed
}

# files that can be not saved under /etckeeper
backup_apache2()
{
	local here=$storage
	local there=/etc/apache2
	create_storage $here
	verbose start backup of remote apache2 config
	rsync -aHS --delete-after ${verbose:+"-vP"} $remote:/$there $here
}

backup()
{
	eval backup_$1 || fatal backup failed on $1
}

configure
backup apache2
backup bzr
backup etc
backup git
backup hg
backup svn
backup redmine
